{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red255\green255\blue255;\red170\green13\blue145;
\red0\green0\blue0;\red196\green26\blue22;\red28\green0\blue207;\red46\green13\blue110;\red63\green110\blue116;
\red92\green38\blue153;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c45600\c0;\csgray\c100000;\csgenericrgb\c66500\c5200\c56900;
\csgenericrgb\c0\c0\c0;\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c11000\c0\c81000;\csgenericrgb\c18100\c5200\c43100;\csgenericrgb\c24700\c43100\c45600;
\csgenericrgb\c35900\c14900\c60100;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab543
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \cb3 //: Playground - noun: a place where people can play
\f1\fs24 \cf0 \
\

\f0\fs22 \cf4 import\cf5  UIKit
\f1\fs24 \cf0 \
\

\f0\fs22 \cf4 var\cf5  str = \cf6 "Hello, playground"
\f1\fs24 \cf0 \
\

\f0\fs22 \cf4 var\cf5  a = [\cf7 10\cf5 ,\cf7 20\cf5 ,\cf7 30\cf5 ,\cf7 40\cf5 ,\cf7 50\cf5 ]
\f1\fs24 \cf0 \

\f0\fs22 \cf8 print\cf5 (\cf6 "a[10]: \cf5 \\\cf6 (\cf9 a\cf5 [\cf7 0\cf5 ]\cf6 )"\cf5 ) \cf2 //prints first element of the array
\f1\fs24 \cf0 \

\f0\fs22 \cf8 print\cf5 (\cf6 "a:"\cf5 ,\cf9 a\cf5 )  \cf2 /// prints whole array
\f1\fs24 \cf0 \

\f0\fs22 \cf4 let\cf5  j1  = [\cf7 10\cf5 ,\cf7 20\cf5 ]
\f1\fs24 \cf0 \

\f0\fs22 \cf8 print\cf5 (\cf6 "j1:"\cf5 , \cf9 j1\cf5 )
\f1\fs24 \cf0 \
\

\f0\fs22 \cf4 var\cf5  b = [\cf10 Int\cf5 ]();
\f1\fs24 \cf0 \

\f0\fs22 \cf8 print\cf5 (\cf6 "Size of array b: \cf5 \\\cf6 (\cf9 b\cf5 .\cf10 count\cf6 )"\cf5 )
\f1\fs24 \cf0 \

\f0\fs22 \cf9 b\cf5 .\cf8 append\cf5 (\cf7 100\cf5 )
\f1\fs24 \cf0 \

\f0\fs22 \cf8 print\cf5 (\cf6 "b[0]: \cf5 \\\cf6 (\cf9 b\cf5 [\cf7 0\cf5 ]\cf6 )"\cf5 )
\f1\fs24 \cf0 \

\f0\fs22 \cf2 /* index out of range error
\f1\fs24 \cf0 \

\f0\fs22 \cf2 b[2]=500
\f1\fs24 \cf0 \

\f0\fs22 \cf2 print("b:",b)
\f1\fs24 \cf0 \

\f0\fs22 \cf2 print("Size of array b:\\(b.count)")
\f1\fs24 \cf0 \

\f0\fs22 \cf2 */
\f1\fs24 \cf0 \

\f0\fs22 \cf2 // assigning the default
\f1\fs24 \cf0 \
\

\f0\fs22 \cf4 var\cf5  num1 = [\cf10 Int\cf5 ](repeating: \cf7 1\cf5 ,count : \cf7 3\cf5 )
\f1\fs24 \cf0 \

\f0\fs22 \cf8 print\cf5 (\cf6 "num1 array:\cf5 \\\cf6 (\cf9 num1\cf6 )"\cf5 )
\f1\fs24 \cf0 \

\f0\fs22 \cf4 var\cf5  num2 = [\cf10 Int\cf5 ] (repeating:\cf7 5\cf5 ,count:\cf7 3\cf5 )
\f1\fs24 \cf0 \

\f0\fs22 \cf8 print\cf5  (\cf6 "num2 array: \cf5 \\\cf6 (\cf9 num2\cf6 )"\cf5 )
\f1\fs24 \cf0 \

\f0\fs22 \cf4 var\cf5  nummerge=\cf9 num1\cf5 +\cf9 num2
\f1\fs24 \cf0 \

\f0\fs22 \cf8 print\cf5 (\cf6 "merge array: \cf5 \\\cf6 (\cf9 nummerge\cf6 )"\cf5 )
\f1\fs24 \cf0 \
\

\f0\fs22 \cf2 //Declare to store any data types values
\f1\fs24 \cf0 \

\f0\fs22 \cf4 var\cf5  c = [\cf4 Any\cf5 ]();
\f1\fs24 \cf0 \

\f0\fs22 \cf8 print\cf5 (\cf6 "Size of an array c:\cf5 \\\cf6 (\cf9 c\cf5 .\cf10 count\cf6 )"\cf5 )
\f1\fs24 \cf0 \

\f0\fs22 \cf9 c\cf5 .\cf8 append\cf5 (\cf7 100\cf5 )
\f1\fs24 \cf0 \

\f0\fs22 \cf9 c\cf5 .\cf8 append\cf5 (\cf6 "Patel"\cf5 )
\f1\fs24 \cf0 \

\f0\fs22 \cf9 c\cf5 .\cf8 append\cf5 (\cf7 100.23\cf5 )
\f1\fs24 \cf0 \

\f0\fs22 \cf8 print\cf5  (\cf6 "C array: \cf5 \\\cf6 (\cf9 c\cf6 )"\cf5 )
\f1\fs24 \cf0 \

\f0\fs22 \cf4 var\cf5  x = \cf9 a\cf5 [\cf7 1\cf5 ...\cf7 3\cf5 ]
\f1\fs24 \cf0 \

\f0\fs22 \cf4 for\cf5  t \cf4 in\cf5  \cf9 x\cf5 \{
\f1\fs24 \cf0 \

\f0\fs22 \cf5     \cf8 print\cf5 (\cf6 "x: \cf5 \\\cf6 (\cf5 t\cf6 )"\cf5 )
\f1\fs24 \cf0 \

\f0\fs22 \cf5 \}
\f1\fs24 \cf0 \

\f0\fs22 \cf2 // String array and for each with(Key,Value)
\f1\fs24 \cf0 \

\f0\fs22 \cf4 var\cf5  shoppingList:[\cf10 String\cf5 ] = [\cf6 "eggs"\cf5 ,\cf6 "Milk"\cf5 ]
\f1\fs24 \cf0 \

\f0\fs22 \cf4 for\cf5 (index,value) \cf4 in\cf5  \cf9 shoppingList\cf5 .\cf8 enumerated\cf5 ()\{
\f1\fs24 \cf0 \

\f0\fs22 \cf5     \cf8 print\cf5 (\cf6 "Item\cf5 \\\cf6 (\cf5 index\cf6 ): \cf5 \\\cf6 (\cf5 value\cf6 )"\cf5 )
\f1\fs24 \cf0 \

\f0\fs22 \cf5 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf8 print\cf5 (\cf6 "PRINT SHOPPING LISTARRAY: \cf5 \\\cf6 (\cf9 shoppingList\cf6 )"\cf5 )
\f1\fs24 \cf0 \

\f0\fs22 \cf4 if\cf5   \cf9 shoppingList\cf5 .\cf10 isEmpty
\f1\fs24 \cf0 \

\f0\fs22 \cf5 \{\cf8 print\cf5 (\cf6 "Cart is empty"\cf5 )
\f1\fs24 \cf0 \

\f0\fs22 \cf5 \}
\f1\fs24 \cf0 \

\f0\fs22 \cf4 else\cf5 \{
\f1\fs24 \cf0 \

\f0\fs22 \cf5     \cf8 print\cf5 (\cf6 "The shopping list is not empty"\cf5 )
\f1\fs24 \cf0 \

\f0\fs22 \cf5 \}
\f1\fs24 \cf0 \
\

\f0\fs22 \cf9 shoppingList\cf5 .\cf8 append\cf5 (\cf6 "Flour"\cf5 )
\f1\fs24 \cf0 \

\f0\fs22 \cf8 print\cf5 (\cf6 "Shopping List array: \cf5 \\\cf6 (\cf9 shoppingList\cf6 )"\cf5 )
\f1\fs24 \cf0 \

\f0\fs22 \cf9 shoppingList\cf5  += [\cf6 "Chocolate Spread"\cf5 ,\cf6 "Cheese"\cf5 ,\cf6 "Butter"\cf5 ]
\f1\fs24 \cf0 \

\f0\fs22 \cf8 print\cf5 (\cf6 "shoppingList array: \cf5 \\\cf6 (\cf9 shoppingList\cf6 )"\cf5 )
\f1\fs24 \cf0 \

\f0\fs22 \cf2 //shopping list[4...6] = ['Banana","Apples"]
\f1\fs24 \cf0 \

\f0\fs22 \cf9 shoppingList\cf5 .\cf8 insert\cf5 (\cf6 "Maple Syrup"\cf5 ,at:\cf7 0\cf5 )
\f1\fs24 \cf0 \

\f0\fs22 \cf4 let\cf5  maplesyrup = \cf9 shoppingList\cf5 .\cf8 remove\cf5 (at: \cf7 2\cf5 )
\f1\fs24 \cf0 \

\f0\fs22 \cf4 let\cf5  apple = \cf9 shoppingList\cf5 .\cf8 removeLast\cf5 ()
\f1\fs24 \cf0 \

\f0\fs22 \cf8 print\cf5 (\cf6 "Shoppinglist \cf5 \\\cf6 (\cf9 shoppingList\cf6 )"\cf5 )
\f1\fs24 \cf0 \
\
\
\
\

\f0\fs22 \cf2 //Set declaring set in swift
\f1\fs24 \cf0 \
\

\f0\fs22 \cf4 var\cf5  grades: \cf10 Set\cf5 <\cf10 Character\cf5 > = []
\f1\fs24 \cf0 \

\f0\fs22 \cf9 grades\cf5 .\cf8 insert\cf5 (\cf6 "A"\cf5 )
\f1\fs24 \cf0 \

\f0\fs22 \cf9 grades\cf5 .\cf8 insert\cf5 (\cf6 "B"\cf5 )
\f1\fs24 \cf0 \

\f0\fs22 \cf8 print\cf5 (\cf6 "grades: \cf5 \\\cf6 (\cf9 grades\cf6 )"\cf5 )
\f1\fs24 \cf0 \

\f0\fs22 \cf8 print\cf5 (\cf6 "grades no of elements"\cf5 ,\cf9 grades\cf5 .\cf10 count\cf5 )
\f1\fs24 \cf0 \

\f0\fs22 \cf4 var\cf5  favouriteGenres: \cf10 Set\cf5 <\cf10 String\cf5 > = [\cf6 "Rock"\cf5 ,\cf6 "Classical"\cf5 ,\cf6 "Hip hop"\cf5 ]
\f1\fs24 \cf0 \

\f0\fs22 \cf8 print\cf5 (\cf6 "I have \cf5 \\\cf6 (\cf9 favouriteGenres\cf6 )"\cf5 )
\f1\fs24 \cf0 \

\f0\fs22 \cf8 print\cf5 (\cf6 "I have \cf5 \\\cf6 (\cf9 favouriteGenres\cf5 .\cf10 count\cf6 ) favourite music genres."\cf5 )
\f1\fs24 \cf0 \

\f0\fs22 \cf4 if\cf5  \cf9 favouriteGenres\cf5 .\cf10 isEmpty\cf5 \{
\f1\fs24 \cf0 \

\f0\fs22 \cf5     \cf8 print\cf5 (\cf6 "AS far as music goes,Im not picky."\cf5 )\}
\f1\fs24 \cf0 \

\f0\fs22 \cf5     \cf4 else
\f1\fs24 \cf0 \

\f0\fs22 \cf5     \{ \cf8 print\cf5 (\cf6 "favouriteGenres:\cf5 \\\cf6 (\cf9 favouriteGenres\cf6 )"\cf5 )
\f1\fs24 \cf0 \

\f0\fs22 \cf5     \}
\f1\fs24 \cf0 \

\f0\fs22 \cf8 print\cf5 (\cf6 "favourite genres: \cf5 \\\cf6 (\cf9 favouriteGenres\cf6 )"\cf5 )
\f1\fs24 \cf0 \

\f0\fs22 \cf4 for\cf5  genre \cf4 in\cf5  \cf9 favouriteGenres\cf5 .\cf8 sorted\cf5 () \{
\f1\fs24 \cf0 \

\f0\fs22 \cf5     \cf8 print\cf5 (\cf6 "\cf5 \\\cf6 (\cf5 genre\cf6 )"\cf5 )
\f1\fs24 \cf0 \
\

\f0\fs22 \cf4 var\cf5  oddDigits: \cf10 Set\cf5  = [\cf7 1\cf5 , \cf7 3\cf5 , \cf7 5\cf5 , \cf7 7\cf5 , \cf7 9\cf5 ]
\f1\fs24 \cf0 \

\f0\fs22 \cf4 var\cf5  evenDigits: \cf10 Set\cf5  = [\cf7 0\cf5 , \cf7 2\cf5 , \cf7 4\cf5 , \cf7 6\cf5 , \cf7 8\cf5 ]
\f1\fs24 \cf0 \

\f0\fs22 \cf4 var\cf5  singleDigit: \cf10 Set\cf5  = [\cf7 2\cf5 , \cf7 3\cf5 , \cf7 5\cf5 , \cf7 7\cf5 ]
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5     \cf8 print\cf5 (oddDigits.\cf8 union\cf5 (evenDigits).\cf8 sorted\cf5 ())
\f1\fs24 \cf0 \

\f0\fs22 \cf5     \cf8 print\cf5 (oddDigits.\cf8 intersection\cf5 (evenDigits).\cf8 sorted\cf5 ())
\f1\fs24 \cf0 \

\f0\fs22 \cf5     print(oddDigits.\cf8 subtract\cf5 (singleDigit).sorted())
\f1\fs24 \cf0 \

\f0\fs22 \cf5     \cf8 print\cf5 (oddDigits.\cf8 symmetricDifference\cf5 (singleDigit).\cf8 sorted\cf5 ())
\f1\fs24 \cf0 \

\f0\fs22 \cf5     
\f1\fs24 \cf0 \

\f0\fs22 \cf5     
\f1\fs24 \cf0 \

\f0\fs22 \cf5     
\f1\fs24 \cf0 \

\f0\fs22 \cf5     
\f1\fs24 \cf0 \
\

\f0\fs22 \cf5 \}
\f1\fs24 \cf0 \
\
\
}